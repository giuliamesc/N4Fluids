///Unstructured mesh with Nedelec elements
string meshType = "unstructured";
string elemType = "Nedelec_convergence";

//Setup verbosity
verbosity = 0;

//Setup domain vertices
real a = 0;
real b = pi;

//We will use the Shift-invert method to solve the eigenvalue problem A*u = lambda*B*u
//To do that, we need to specify the value of the shift
real sigma = 16;
real tolerance = -0.5;

//We also need to specify the number of eigenvalues to compute
int nev = 1; //Only 1 because convergence test

//Prepare vectors to store the eigenvalues and eigenvectors
real[int] ev(nev);

//Setup number of values for n and m, prepare variable for eigenvalue
int N = 7;
real omega2 = 0;

//Number of refinements
int I = 8;

for(int i = 3; i <= I; i++)
{ 
    cout << "Refinements = "<<i<<endl<<endl;
    //Prepare output file
    ofstream file ("ConvergenceTests/lambda_" + meshType + "_" + elemType + "_" + i + ".dat");

    //Build mesh
    border l1(t=a,b){x=t;y=0;label=1;}
    border l2(t=a,b){x=b;y=t;label=2;}
    border l3(t=a,b){x=b-t;y=b;label=3;}
    border l4(t=a,b){x=a;y=b-t;label=4;}
    mesh Th=buildmesh(l1(2^i)+l2(2^i)+l3(2^i)+l4(2^i));

    //FEspace
    fespace Vh(Th, RT0Ortho);
    Vh [u1, u2], [v1, v2];

    // //Get mesh size
    // fespace Qh(Th, P0);
    // Qh h = hTriangle;
    // hvect[i] = h[].max;

    //Solve the problem for each valid couple (n,m)
    for(int n = 0; n < N; n++)
    {
        for(int m = 0; m < N; m++)
        {
            omega2 = n*n + m*m;

            if(omega2 != 0) //Don't consider the zero eigenvalue
            {
                //Compute the new shift
                sigma = omega2 + tolerance;        

                //Setup problem in variational form using the Shift-invert method
                varf op([u1, u2], [v1, v2]) = int2d(Th)(dx(u2)*dx(v2) - dy(u1)*dx(v2) - dx(u2)*dy(v1) + dy(u1)*dy(v1))
                                            - int2d(Th)(sigma * (u1*v1 + u2*v2))
                                            + on(1, 3, u1=0, u2=sin(n*y))
                                            + on(2, 4, u1=sin(m*x), u2=0);

                varf bb([u1, u2], [v1, v2])  = int2d(Th)(u1*v1 + u2*v2); 

                //Translate into matrix problem and specify solvers
                //OP = A - sigma B and we want to solve OPw = Bu
                matrix OP = op(Vh, Vh, solver=Crout, factorize=1); //use Crout solver because the matrix is not positive
                matrix B  = bb(Vh, Vh, solver=CG, eps=1e-20);

                //Solve the eigenvalue problem and store the number of eigenvalues in k
                int k = EigenValue(OP, B, sym=true, sigma=sigma, value=ev, tol=1e-10, maxit=0, ncv=0, which="LA");

                //Print computed and exact eigenvalues for comparison
                cout << "lambda_exact = " << omega2 << ";" << "lambda_computed = " << ev[0] << "; Shift = " <<sigma <<endl;

                //Write results in a file
                file << ev[0] <<endl;
            }
        }
    }

    cout << endl;
}




// //Write results in a file
// for (int j = 0; j < k; j++){
//     file << ev[j] << endl;
// }   
